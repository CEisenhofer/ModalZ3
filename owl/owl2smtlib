#!/usr/bin/env python3

import owlready2 as owl

def translate_class(klass):
    if isinstance(klass, owl.EntityClass):
        # owl.Thing is assumed to always be true
        if klass.namespace.name == 'owl' and klass.name == 'Thing':
            return 'true'
        return f"(_{klass.name} world)"
    elif isinstance(klass, owl.Not):
        negated = translate_class(klass.Class)
        return f"(not {negated})"
    elif isinstance(klass, owl.Or):
        disjunction = ' '.join(translate_class(klass) for klass in klass.Classes)
        return f"(or {disjunction})"
    elif isinstance(klass, owl.And):
        conjunction = ' '.join(translate_class(klass) for klass in klass.Classes)
        return f"(and {conjunction})"
    elif isinstance(klass, owl.Restriction):
        if klass.type == owl.SOME:
            reachable = translate_class(klass.value)
            return f"(dia _{klass.property.name} {reachable})"
        elif klass.type == owl.ONLY:
            reachable = translate_class(klass.value)
            return f"(box _{klass.property.name} {reachable})"
        elif klass.type == owl.VALUE:
            return f"(dia _{klass.property.name} (= world _{klass.value.name}))"
        # TODO counting constraints
        elif klass.type == owl.MIN or klass.type == owl.EXACTLY or klass.type == owl.MAX:
            return f"true"
        else:
            print(klass)
            assert False
    elif isinstance(klass, owl.OneOf):
        disjunction = ' '.join(f"(= world _{instance.name})" for instance in klass.instances)
        return f"(or {disjunction})"
    else:
        print(klass)
        assert False

if __name__ == '__main__':
    import sys
    path = sys.argv[1]
    ontology = owl.get_ontology(path)
    ontology.load()

    print("; individual declarations")
    for individual in ontology.individuals():
        print(f"(declare-const _{individual.name} World)")
    print()

    print("; class declarations")
    for klass in ontology.classes():
        print(f"(declare-fun _{klass.name} (World) Bool)")
    print()

    print("; property declarations")
    for property in ontology.properties():
        print(f"(declare-const _{property.name} Relation)")
    print()

    print("; different individuals")
    for disjoint in ontology.different_individuals():
        names = ' '.join(f'_{entity.name}' for entity in disjoint.entities)
        print(f"(assert (distinct {names}))")
    print()

    print("; class instances")
    for klass in ontology.classes():
        for instance in klass.instances():
            print(f"(assert (_{klass.name} _{instance.name}))")
    print()

    print("; disjoint classes")
    for disjoint in ontology.disjoint_classes():
        instances = " ".join(f"(_{klass.name} world)" for klass in disjoint.entities)
        print(f"(assert (global ((_ at-most 1) {instances})))")
    print()

    print("; class properties")
    for klass in ontology.classes():
        translated_klass = translate_class(klass)
        for property in klass.is_a:
            translated_property = translate_class(property)
            print(f"(assert (global (=> {translated_klass} {translated_property})))")
        for property in klass.equivalent_to:
            translated_property = translate_class(property)
            print(f"(assert (global (= {translated_klass} {translated_property})))")
    print()

    print("; property properties")
    for property in ontology.properties():
        # TODO compound domain/range constraints
        if property.domain and len(property.domain) == 1 and isinstance(property.domain[0], owl.EntityClass):
            domain = property.domain[0]
            print(f"(assert (global (=> (not (_{domain.name} world)) (not (dia _{property.name} true)))))")
        if property.range and len(property.range) == 1 and isinstance(property.range[0], owl.EntityClass):
            range = property.range[0]
            print(f"(assert (global (box _{property.name} (_{range.name} world))))")

        # TODO functional properties
        # TODO transitive properties
        # TODO inverse properties
        for subject, object in property.get_relations():
            if isinstance(type(subject), owl.EntityClass) and isinstance(type(object), owl.EntityClass):
                print(f"(assert (global (=> (= world _{subject.name}) (dia _{property.name} (= world _{object.name})))))")
            # TODO metadata
